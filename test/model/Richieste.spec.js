/*
 * Visengine 2.0
 * Questo servizio offre chiamate di rest per usufruire di tutta una serie di servizi camerali, catastali o di patronato legati a imprese e privati
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.59
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Visengine20);
  }
}(this, function(expect, Visengine20) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Richieste', function() {
      beforeEach(function() {
        instance = new Visengine20.Richieste();
      });

      it('should create an instance of Richieste', function() {
        // TODO: update the code to test Richieste
        expect(instance).to.be.a(Visengine20.Richieste);
      });

      it('should have the property id (base name: "_id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property hashVisura (base name: "hash_visura")', function() {
        // TODO: update the code to test the property hashVisura
        expect(instance).to.have.property('hashVisura');
        // expect(instance.hashVisura).to.be(expectedValueLiteral);
      });

      it('should have the property nome (base name: "nome")', function() {
        // TODO: update the code to test the property nome
        expect(instance).to.have.property('nome');
        // expect(instance.nome).to.be(expectedValueLiteral);
      });

      it('should have the property ricerca (base name: "ricerca")', function() {
        // TODO: update the code to test the property ricerca
        expect(instance).to.have.property('ricerca');
        // expect(instance.ricerca).to.be(expectedValueLiteral);
      });

      it('should have the property idRicerca (base name: "id_ricerca")', function() {
        // TODO: update the code to test the property idRicerca
        expect(instance).to.have.property('idRicerca');
        // expect(instance.idRicerca).to.be(expectedValueLiteral);
      });

      it('should have the property prezzoVisura (base name: "prezzo_visura")', function() {
        // TODO: update the code to test the property prezzoVisura
        expect(instance).to.have.property('prezzoVisura');
        // expect(instance.prezzoVisura).to.be(expectedValueLiteral);
      });

      it('should have the property prezzoRicerca (base name: "prezzo_ricerca")', function() {
        // TODO: update the code to test the property prezzoRicerca
        expect(instance).to.have.property('prezzoRicerca');
        // expect(instance.prezzoRicerca).to.be(expectedValueLiteral);
      });

      it('should have the property indiceRicerca (base name: "indice_ricerca")', function() {
        // TODO: update the code to test the property indiceRicerca
        expect(instance).to.have.property('indiceRicerca');
        // expect(instance.indiceRicerca).to.be(expectedValueLiteral);
      });

      it('should have the property statoRichiesta (base name: "stato_richiesta")', function() {
        // TODO: update the code to test the property statoRichiesta
        expect(instance).to.have.property('statoRichiesta');
        // expect(instance.statoRichiesta).to.be(expectedValueLiteral);
      });

      it('should have the property emailTarget (base name: "email_target")', function() {
        // TODO: update the code to test the property emailTarget
        expect(instance).to.have.property('emailTarget');
        // expect(instance.emailTarget).to.be(expectedValueLiteral);
      });

      it('should have the property timestampCreation (base name: "timestamp_creation")', function() {
        // TODO: update the code to test the property timestampCreation
        expect(instance).to.have.property('timestampCreation');
        // expect(instance.timestampCreation).to.be(expectedValueLiteral);
      });

      it('should have the property timestampLastUpdate (base name: "timestamp_last_update")', function() {
        // TODO: update the code to test the property timestampLastUpdate
        expect(instance).to.have.property('timestampLastUpdate');
        // expect(instance.timestampLastUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property sincrona (base name: "sincrona")', function() {
        // TODO: update the code to test the property sincrona
        expect(instance).to.have.property('sincrona');
        // expect(instance.sincrona).to.be(expectedValueLiteral);
      });

    });
  });

}));
