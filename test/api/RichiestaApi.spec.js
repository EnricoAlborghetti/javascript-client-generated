/*
 * Visengine 2.0
 * Questo servizio offre chiamate di rest per usufruire di tutta una serie di servizi camerali, catastali o di patronato legati a imprese e privati
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.59
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Visengine20);
  }
}(this, function(expect, Visengine20) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Visengine20.RichiestaApi();
  });

  describe('(package)', function() {
    describe('RichiestaApi', function() {
      describe('richiestaGet', function() {
        it('should call richiestaGet successfully', function(done) {
          // TODO: uncomment richiestaGet call and complete the assertions
          /*

          instance.richiestaGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Visengine20.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('richiestaIdGet', function() {
        it('should call richiestaIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for richiestaIdGet call and complete the assertions
          /*

          instance.richiestaIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Visengine20.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('richiestaIdPost', function() {
        it('should call richiestaIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for richiestaIdPost call and complete the assertions
          /*

          instance.richiestaIdPost(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Visengine20.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('richiestaIdPut', function() {
        it('should call richiestaIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for richiestaIdPut call and complete the assertions
          /*

          instance.richiestaIdPut(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Visengine20.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('richiestaIdRicerchePut', function() {
        it('should call richiestaIdRicerchePut successfully', function(done) {
          // TODO: uncomment, update parameter values for richiestaIdRicerchePut call and complete the assertions
          /*

          instance.richiestaIdRicerchePut(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Visengine20.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('richiestaPost', function() {
        it('should call richiestaPost successfully', function(done) {
          // TODO: uncomment, update parameter values for richiestaPost call and complete the assertions
          /*

          instance.richiestaPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Visengine20.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
